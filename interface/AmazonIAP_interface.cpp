/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "AmazonIAP.h"


// For MIPs (and WP8) platform we do not have asm code for stack switching 
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*AmazonIAPRegister_t)(AmazonIAPCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*AmazonIAPUnRegister_t)(AmazonIAPCallback cbid, s3eCallback fn);
typedef  s3eResult(*AmazonIAPStartPurchase_t)(const char* productID);

/**
 * struct that gets filled in by AmazonIAPRegister
 */
typedef struct AmazonIAPFuncs
{
    AmazonIAPRegister_t m_AmazonIAPRegister;
    AmazonIAPUnRegister_t m_AmazonIAPUnRegister;
    AmazonIAPStartPurchase_t m_AmazonIAPStartPurchase;
} AmazonIAPFuncs;

static AmazonIAPFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0xfcc81ee5, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: AmazonIAP");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0xfcc81ee5, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool AmazonIAPAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult AmazonIAPRegister(AmazonIAPCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(AMAZONIAP_VERBOSE, ("calling AmazonIAP[0] func: AmazonIAPRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_AmazonIAPRegister(cbid, fn, userData);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult AmazonIAPUnRegister(AmazonIAPCallback cbid, s3eCallback fn)
{
    IwTrace(AMAZONIAP_VERBOSE, ("calling AmazonIAP[1] func: AmazonIAPUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_AmazonIAPUnRegister(cbid, fn);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult AmazonIAPStartPurchase(const char* productID)
{
    IwTrace(AMAZONIAP_VERBOSE, ("calling AmazonIAP[2] func: AmazonIAPStartPurchase"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_AmazonIAPStartPurchase(productID);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
